#ifndef __FUNCTIONALITY_H
#define __FUNCTIONALITY_H
/* library */
#include <string>
#include <vector>
#include <map>
#include <mlpack/core.hpp>
#include <armadillo>

/**
 * @brief Reads file generated by data-collection and parse it to list of strings. 
 * 
 * @param filename  Name of the file to read. 
 * @param urls      List to output file content.
 * @return Error code 
 */
int readFile(const std::string filename, std::vector<std::string>& urls);

/**
 * @brief Downloads a set of images.
 * 
 * @param urls          List of URLs.
 * @param datasetName   Name of path location.
 * @return Error code
 */
int downloadDataset(const std::vector<std::string> urls, const std::string datasetName);

/**
 * @brief Downloads image from URL to file location.
 * 
 * @param url       Location to image to download.
 * @param filename  Path to save image.
 * @return Error code  
 */
int downloadImage(const std::string url, const std::string filename);

/**
 * @brief Stores image paths for specified dataset.
 * 
 * @param dataset       Dataset to create paths for.
 * @param datasetPaths  List to save dataset paths to.
 */
void getDatasetPaths(const std::string dataset, std::vector<std::string> &datasetPaths);

/**
 * @brief Parses images to a matrix.
 * 
 * @param datasetPaths  Paths to images in dataset.
 * @param matrix        Matrix to save output to.
 * @param imageMetadata Structure to save image metadata to.
 * @return Error code 
 */
int parseImageToMatrix(const std::vector<std::string> datasetPaths, arma::mat &matrix, mlpack::data::ImageInfo &imageMetadata);

/**
 * @brief Generate array of labels
 * 
 * @param mapLabel  Stores information between key and value.
 * @param key       Specific key.
 * @param labels    List to save output to.
 * @return Error code 
 */
int getLabels(const std::map<std::string, int> mapLabel, const std::string key, arma::rowvec &labels);

/**
 * @brief Performs train/test split.
 * 
 * @param data          Dataset.
 * @param labels        Labels.
 * @param trainData     Training dataset.
 * @param testData      Testing dataset.
 * @param trainLabel    Training labels.
 * @param testLabel     Testing labels.
 * @param ratio         Train/test ratio.
 * @param flagShuffle   Wether to shuffle or not.
 */
void trainTestSplit(const arma::mat data, const arma::rowvec labels, arma::mat &trainData, arma::mat &testData, arma::rowvec &trainLabel, arma::rowvec &testLabel, const double ratio, const bool flagShuffle);

#endif
